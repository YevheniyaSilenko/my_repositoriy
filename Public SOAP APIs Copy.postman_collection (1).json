{
	"info": {
		"_postman_id": "a0f48d24-cbe7-4819-8da1-34b18870e6cb",
		"name": "Public SOAP APIs Copy",
		"description": "This is a collection of different SOAP APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27727107"
	},
	"item": [
		{
			"name": "Book ISBN Numbers",
			"item": [
				{
					"name": "Is Valid ISBN13 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Перевірка статусу відповіді",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Перевірка формату відповіді",
									"pm.test(\"Response is in XML format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");",
									"});",
									"",
									"// Перевірка наявності елементу <IsValidISBN13Result>",
									"pm.test(\"Response contains <IsValidISBN13Result>\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<m:IsValidISBN13Result>\");",
									"});",
									"",
									"// Перевірка наявності елементу SOAP Body",
									"pm.test(\"Response contains SOAP Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<soap:Body>\");",
									"});",
									"",
									"// Перевірка, що відповідь не порожня",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"});",
									"",
									"// Перевірка часу відповіді",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Перевірка відсутності помилкових тегів у відповіді",
									"pm.test(\"Response does not contain error tags\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"<fault>\");",
									"});",
									"",
									"// Перевірка правильного простору імен у SOAP Envelope",
									"pm.test(\"Correct namespace in SOAP Envelope\", function () {",
									"    pm.expect(pm.response.text()).to.include('xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"');",
									"});",
									"",
									"// Перевірка наявності заголовку Content-Type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"// Перевірка значення заголовку Content-Type",
									"pm.test(\"Content-Type is correct\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");",
									"});",
									"",
									"// Перевірка наявності заголовку Content-Length",
									"pm.test(\"Content-Length is present\", function () {",
									"    pm.response.to.have.header(\"Content-Length\");",
									"});",
									"",
									"// Перевірка значення заголовку Content-Length",
									"pm.test(\"Content-Length is greater than 0\", function () {",
									"    var contentLength = pm.response.headers.get(\"Content-Length\");",
									"    pm.expect(parseInt(contentLength)).to.be.above(0);",
									"});",
									"",
									"// Перевірка наявності заголовку Date",
									"pm.test(\"Date header is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"});",
									"",
									"// Перевірка коректності заголовку Date",
									"pm.test(\"Date header is valid\", function () {",
									"    var date = new Date(pm.response.headers.get(\"Date\"));",
									"    pm.expect(date.toString()).not.to.eql(\"Invalid Date\");",
									"});",
									"",
									"// Перевірка наявності заголовку Server",
									"pm.test(\"Server header is present\", function () {",
									"    pm.response.to.have.header(\"Server\");",
									"});",
									"",
									"// Перевірка значення заголовку Server",
									"pm.test(\"Server header is correct\", function () {",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"Microsoft-IIS\");",
									"});",
									"",
									"// Тест на відсутність заголовка Transfer-Encoding (якщо є Content-Length)",
									"pm.test(\"Transfer-Encoding header is absent when Content-Length is present\", function () {",
									"    if (pm.response.headers.has(\"Content-Length\")) {",
									"        pm.expect(pm.response.headers.has(\"Transfer-Encoding\")).to.be.false;",
									"    }",
									"});",
									"pm.test(\"Cache-Control header is correct\", function () {",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"private, max-age=0\");",
									"});",
									"",
									"const xml2js = require('xml2js');",
									"",
									"// Функція для конвертації XML у JSON",
									"const parseXml = (xml) => {",
									"    return new Promise((resolve, reject) => {",
									"        xml2js.parseString(xml, { explicitArray: false }, (err, result) => {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                resolve(result);",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"pm.test(\"Check if HTTP links are present in XML response\", function (done) {",
									"    const responseXml = pm.response.text();",
									"    ",
									"    parseXml(responseXml).then((result) => {",
									"        // Функція для рекурсивного пошуку HTTP/HTTPS посилань у JSON",
									"        const findLinks = (obj) => {",
									"            let links = [];",
									"            for (const key in obj) {",
									"                if (typeof obj[key] === 'string') {",
									"                    const httpPattern = /http(s)?:\\/\\/[^\\s/$.?#].[^\\s]*/g;",
									"                    const matches = obj[key].match(httpPattern);",
									"                    if (matches) {",
									"                        links = links.concat(matches);",
									"                    }",
									"                } else if (typeof obj[key] === 'object') {",
									"                    links = links.concat(findLinks(obj[key]));",
									"                }",
									"            }",
									"            return links;",
									"        };",
									"        ",
									"        const links = findLinks(result);",
									"        pm.expect(links).to.not.be.empty; // Перевірка, що знайдено HTTP/HTTPS посилання",
									"        done();",
									"    }).catch((err) => {",
									"        pm.expect.fail(\"Failed to parse XML response\");",
									"        done();",
									"    });",
									"});",
									"",
									"// Тест для перевірки XML-схеми",
									"pm.test(\"Check XML schema\", function (done) {",
									"    const responseXml = pm.response.text();",
									"    ",
									"    parseXml(responseXml).then((result) => {",
									"        console.log(\"Parsed XML response:\", JSON.stringify(result, null, 2));",
									"        ",
									"        // Перевірка кореневого елемента Envelope",
									"        pm.expect(result).to.have.property('soap:Envelope');",
									"",
									"        // Перевірка наявності елемента Body всередині Envelope",
									"        const envelope = result['soap:Envelope'];",
									"        pm.expect(envelope).to.have.property('soap:Body');",
									"",
									"        // Перевірка наявності елемента IsValidISBN13Response всередині Body",
									"        const body = envelope['soap:Body'];",
									"        pm.expect(body).to.have.property('m:IsValidISBN13Response');",
									"",
									"        // Перевірка наявності елемента IsValidISBN13Result всередині IsValidISBN13Response",
									"        const response = body['m:IsValidISBN13Response'];",
									"        pm.expect(response).to.have.property('m:IsValidISBN13Result');",
									"        ",
									"        done();",
									"    }).catch((err) => {",
									"        console.log(\"Error parsing XML response:\", err);",
									"        pm.expect.fail(\"Failed to parse XML response: \" + err.message);",
									"        done();",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN13 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>978-1-4612-9090-2</sISBN>\n    </IsValidISBN13>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 12 digits and compare the result with the checksum number at the end. You have to pass a 13 digits number."
					},
					"response": []
				},
				{
					"name": "Is Valid ISBN10 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Отримати всі заголовки запиту",
									"let headers = pm.request.headers.toObject();",
									"let contentTypeHeaders = pm.request.headers.all().filter(header => header.key.toLowerCase() === 'content-type');",
									"",
									"// Перевірити кількість заголовків Content-Type",
									"pm.test(\"Request has multiple Content-Type headers\", function () {",
									"    pm.expect(contentTypeHeaders.length).to.be.above(1, \"Request should have multiple Content-Type headers\");",
									"});",
									"",
									"// Виявити зайвий заголовок Content-Type",
									"let extraContentTypeHeaders = contentTypeHeaders.filter(header => header.value !== 'text/xml; charset=utf-8');",
									"",
									"pm.test(\"There is an extra Content-Type header\", function () {",
									"    pm.expect(extraContentTypeHeaders.length).to.be.above(0, \"There should be an extra Content-Type header\");",
									"    pm.expect(extraContentTypeHeaders[0].value).to.equal('application/soap+xml', \"The extra Content-Type header should be 'application/soap+xml'\");",
									"});",
									"",
									"",
									"// Перевірка статусу відповіді",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Перевірка формату відповіді",
									"pm.test(\"Response is in HTML format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									"// Перевірка наявності повідомлень про помилку",
									"pm.test(\"Response contains 'Bad Request' message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"Response contains 'Invalid Header' message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Header\");",
									"});",
									"",
									"// Перевірка заголовків відповіді",
									"pm.test(\"Content-Type header is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is correct\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									"pm.test(\"Server header is present\", function () {",
									"    pm.response.to.have.header(\"Server\");",
									"});",
									"",
									"pm.test(\"Server header value is correct\", function () {",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"Microsoft-HTTPAPI/2.0\");",
									"});",
									"",
									"pm.test(\"Date header is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"});",
									"",
									"pm.test(\"Error response body contains 'Bad Request'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"Check if the Content-Type is correct for error response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									"pm.test(\"Request XML is correctly formatted\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    pm.expect(requestBody).to.include(\"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\");",
									"    pm.expect(requestBody).to.include(\"<soap:Body>\");",
									"    pm.expect(requestBody).to.include(\"</soap:Envelope>\");",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include(\"Bad Request\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/soap+xml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN10 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>0-19-852663-6</sISBN>\n    </IsValidISBN10>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 9 digits and compare the result with the checksum number at the end. You have to pass a 10 digits number or 8 digits and an X."
					},
					"response": []
				}
			],
			"description": "SOAP APIs for book ISBN numbers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}